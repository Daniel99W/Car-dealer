// <auto-generated />
using System;
using Infrastructure.CarDealer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.CarDealer.Migrations
{
    [DbContext(typeof(AnnouncesContext))]
    [Migration("20220529193101_DeleteSubjectMigration")]
    partial class DeleteSubjectMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Core.CarDealer.Models.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("brand", (string)null);
                });

            modelBuilder.Entity("Core.CarDealer.Models.Car", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("AddingDate")
                        .HasColumnType("date")
                        .HasColumnName("adding_date");

                    b.Property<Guid?>("BrandId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("brand_id");

                    b.Property<string>("CarNumber")
                        .IsRequired()
                        .HasMaxLength(7)
                        .IsUnicode(false)
                        .HasColumnType("varchar(7)")
                        .HasColumnName("car_number");

                    b.Property<Guid?>("CarTypeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("car_type_id");

                    b.Property<int>("CilindricCapacity")
                        .HasColumnType("int")
                        .HasColumnName("cilindric_capacity");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3000)")
                        .HasColumnName("description");

                    b.Property<Guid?>("FuelType")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("fuel_type");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("model");

                    b.Property<int>("Price")
                        .HasColumnType("int")
                        .HasColumnName("price");

                    b.Property<int?>("ProductionYear")
                        .HasColumnType("int")
                        .HasColumnName("production_year");

                    b.Property<bool?>("SecondHand")
                        .HasColumnType("bit")
                        .HasColumnName("second_hand");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CarTypeId");

                    b.HasIndex("FuelType");

                    b.HasIndex("UserId");

                    b.ToTable("car", (string)null);
                });

            modelBuilder.Entity("Core.CarDealer.Models.CarEquipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid?>("CarId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("car_id");

                    b.Property<Guid?>("EquipmentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("equipment_id");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("EquipmentId");

                    b.ToTable("car_equipment", (string)null);
                });

            modelBuilder.Entity("Core.CarDealer.Models.CarType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("car_type", (string)null);
                });

            modelBuilder.Entity("Core.CarDealer.Models.Equipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("equipment", (string)null);
                });

            modelBuilder.Entity("Core.CarDealer.Models.FuelType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("fuel_type", (string)null);
                });

            modelBuilder.Entity("Core.CarDealer.Models.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid?>("CarId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("car_id");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("image_url");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.ToTable("image", (string)null);
                });

            modelBuilder.Entity("Core.CarDealer.Models.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("content");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("message", (string)null);
                });

            modelBuilder.Entity("Core.CarDealer.Models.MessageTo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid?>("MessageId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("message_id");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.HasIndex("UserId");

                    b.ToTable("message_to", (string)null);
                });

            modelBuilder.Entity("Core.CarDealer.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("role", (string)null);
                });

            modelBuilder.Entity("Core.CarDealer.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("password");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("role_id");

                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("second_name");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("Core.CarDealer.Models.UserCar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid?>("CarId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("car_id");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_car", (string)null);
                });

            modelBuilder.Entity("Core.CarDealer.Models.Car", b =>
                {
                    b.HasOne("Core.CarDealer.Models.Brand", "Brand")
                        .WithMany("Cars")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__car__brand_id__4E88ABD4");

                    b.HasOne("Core.CarDealer.Models.CarType", "CarType")
                        .WithMany("Cars")
                        .HasForeignKey("CarTypeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__car__car_type_id__4F7CD00D");

                    b.HasOne("Core.CarDealer.Models.FuelType", "FuelTypeNavigation")
                        .WithMany("Cars")
                        .HasForeignKey("FuelType")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__car__fuel_type__36B12243");

                    b.HasOne("Core.CarDealer.Models.User", "User")
                        .WithMany("Cars")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__car__user_id__35BCFE0A");

                    b.Navigation("Brand");

                    b.Navigation("CarType");

                    b.Navigation("FuelTypeNavigation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.CarDealer.Models.CarEquipment", b =>
                {
                    b.HasOne("Core.CarDealer.Models.Car", "Car")
                        .WithMany("CarEquipments")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__car_equip__car_i__398D8EEE");

                    b.HasOne("Core.CarDealer.Models.Equipment", "Equipment")
                        .WithMany("CarEquipments")
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__car_equip__equip__3A81B327");

                    b.Navigation("Car");

                    b.Navigation("Equipment");
                });

            modelBuilder.Entity("Core.CarDealer.Models.Image", b =>
                {
                    b.HasOne("Core.CarDealer.Models.Car", "Car")
                        .WithMany("Images")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__image__car_id__5EBF139D");

                    b.Navigation("Car");
                });

            modelBuilder.Entity("Core.CarDealer.Models.Message", b =>
                {
                    b.HasOne("Core.CarDealer.Models.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__message__user_id__30F848ED");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.CarDealer.Models.MessageTo", b =>
                {
                    b.HasOne("Core.CarDealer.Models.Message", "Message")
                        .WithMany("MessageTos")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__message_t__messa__4222D4EF");

                    b.HasOne("Core.CarDealer.Models.User", "User")
                        .WithMany("MessageTos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__message_t__user___412EB0B6");

                    b.Navigation("Message");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.CarDealer.Models.User", b =>
                {
                    b.HasOne("Core.CarDealer.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__user__role_id__02FC7413");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Core.CarDealer.Models.UserCar", b =>
                {
                    b.HasOne("Core.CarDealer.Models.User", "User")
                        .WithMany("UserCars")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__user_car__user_i__09A971A2");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.CarDealer.Models.Brand", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("Core.CarDealer.Models.Car", b =>
                {
                    b.Navigation("CarEquipments");

                    b.Navigation("Images");
                });

            modelBuilder.Entity("Core.CarDealer.Models.CarType", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("Core.CarDealer.Models.Equipment", b =>
                {
                    b.Navigation("CarEquipments");
                });

            modelBuilder.Entity("Core.CarDealer.Models.FuelType", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("Core.CarDealer.Models.Message", b =>
                {
                    b.Navigation("MessageTos");
                });

            modelBuilder.Entity("Core.CarDealer.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Core.CarDealer.Models.User", b =>
                {
                    b.Navigation("Cars");

                    b.Navigation("MessageTos");

                    b.Navigation("Messages");

                    b.Navigation("UserCars");
                });
#pragma warning restore 612, 618
        }
    }
}
